{"version":3,"file":"component---src-pages-index-js-759954cbb91832812189.js","mappings":"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","sources":["webpack://jigsaw/./src/assets/3x3/puzzle1.jpg","webpack://jigsaw/./src/assets/3x3/puzzle2.jpg","webpack://jigsaw/./src/assets/3x3/puzzle3.jpg","webpack://jigsaw/./src/assets/3x3/puzzle4.jpg","webpack://jigsaw/./src/assets/3x3/puzzle5.jpg","webpack://jigsaw/./src/assets/3x3/puzzle6.jpg","webpack://jigsaw/./src/components/Jigsaw3x3.js","webpack://jigsaw/./src/assets/4x4/puzzle1.jpg","webpack://jigsaw/./src/assets/4x4/puzzle2.jpg","webpack://jigsaw/./src/assets/4x4/puzzle3.jpg","webpack://jigsaw/./src/assets/4x4/puzzle4.jpg","webpack://jigsaw/./src/assets/4x4/puzzle5.jpg","webpack://jigsaw/./src/assets/4x4/puzzle6.jpg","webpack://jigsaw/./src/components/Jigsaw4x4.js","webpack://jigsaw/./src/pages/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/puzzle1-a46839a5d4bea7074b7bba225c562ee5.jpg\";","export default __webpack_public_path__ + \"static/puzzle2-da26a02516d5c8ee76958278a27123ef.jpg\";","export default __webpack_public_path__ + \"static/puzzle3-f96c9606474d8a4e404622cfb062b745.jpg\";","export default __webpack_public_path__ + \"static/puzzle4-a371a587f8dae460bb311ff439cf5402.jpg\";","export default __webpack_public_path__ + \"static/puzzle5-dc9d9cb5cdcd46bef07a89140c10d806.jpg\";","export default __webpack_public_path__ + \"static/puzzle6-a399fa941819e3e9124e240cc585f42d.jpg\";","import * as React from 'react';\n\nimport puzzleA from '../assets/3x3/puzzle1.jpg';\nimport puzzleB from '../assets/3x3/puzzle2.jpg';\nimport puzzleC from '../assets/3x3/puzzle3.jpg';\nimport puzzleD from '../assets/3x3/puzzle4.jpg';\nimport puzzleE from '../assets/3x3/puzzle5.jpg';\nimport puzzleF from '../assets/3x3/puzzle6.jpg';\n\nconst NUM_ROWS = 3;\nconst NUM_COLS = 3;\nconst NUM_TILES = NUM_ROWS * NUM_COLS;\nconst EMPTY_INDEX = NUM_TILES - 1;\nconst SHUFFLE_MOVES_RANGE = [60, 80];\nconst MOVE_DIRECTIONS = ['up', 'down', 'left', 'right'];\nconst puzzles = [puzzleA, puzzleB, puzzleC, puzzleD, puzzleE, puzzleF];\nconst toSolve = puzzles[rand(0, 5)];\n\nfunction rand(min, max) {\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n\nclass GameState {\n  static getNewBoard() {\n    return Array(NUM_TILES)\n      .fill(0)\n      .map((x, index) => [Math.floor(index / NUM_ROWS), index % NUM_COLS]);\n  }\n\n  static solvedBoard = GameState.getNewBoard();\n  static instance = null;\n\n  static getInstance() {\n    if (!GameState.instance) GameState.instance = new GameState();\n    return GameState.instance;\n  }\n\n  constructor() {\n    this.startNewGame();\n  }\n\n  isSolved() {\n    for (let i = 0; i < NUM_TILES; i++) {\n      if (\n        this.board[i][0] !== GameState.solvedBoard[i][0] ||\n        this.board[i][1] !== GameState.solvedBoard[i][1]\n      )\n        return false;\n    }\n    return true;\n  }\n\n  startNewGame() {\n    this.moves = 0;\n    this.board = GameState.getNewBoard();\n    this.stack = [];\n    this.shuffle();\n  }\n\n  shuffle() {\n    this.shuffling = true;\n    let shuffleMoves = rand(...SHUFFLE_MOVES_RANGE);\n    while (shuffleMoves-- > 0) {\n      this.moveInDirection(MOVE_DIRECTIONS[rand(0, 3)]);\n    }\n    this.shuffling = false;\n  }\n\n  canMoveTile(index) {\n    if (index < 0 || index >= NUM_TILES) return false;\n\n    const tilePos = this.board[index];\n    const emptyPos = this.board[EMPTY_INDEX];\n    if (tilePos[0] === emptyPos[0])\n      return Math.abs(tilePos[1] - emptyPos[1]) === 1;\n    else if (tilePos[1] === emptyPos[1])\n      return Math.abs(tilePos[0] - emptyPos[0]) === 1;\n    else return false;\n  }\n\n  moveTile(index) {\n    if (!this.shuffling && this.isSolved()) return false;\n    if (!this.canMoveTile(index)) return false;\n\n    const emptyPosition = [...this.board[EMPTY_INDEX]];\n    const tilePosition = [...this.board[index]];\n\n    let boardAfterMove = [...this.board];\n    boardAfterMove[EMPTY_INDEX] = tilePosition;\n    boardAfterMove[index] = emptyPosition;\n\n    if (!this.shuffling) this.stack.push(this.board);\n    this.board = boardAfterMove;\n    if (!this.shuffling) this.moves += 1;\n\n    return true;\n  }\n\n  undo() {\n    if (this.stack.length === 0) return false;\n    this.board = this.stack.pop();\n  }\n\n  moveInDirection(dir) {\n    const epos = this.board[EMPTY_INDEX];\n    const posToMove =\n      dir === 'up'\n        ? [epos[0] + 1, epos[1]]\n        : dir === 'down'\n        ? [epos[0] - 1, epos[1]]\n        : dir === 'left'\n        ? [epos[0], epos[1] + 1]\n        : dir === 'right'\n        ? [epos[0], epos[1] - 1]\n        : epos;\n    let tileToMove = EMPTY_INDEX;\n    for (let i = 0; i < NUM_TILES; i++) {\n      if (\n        this.board[i][0] === posToMove[0] &&\n        this.board[i][1] === posToMove[1]\n      ) {\n        tileToMove = i;\n        break;\n      }\n    }\n    this.moveTile(tileToMove);\n  }\n\n  getState() {\n    const self = this;\n    return {\n      board: self.board,\n      moves: self.moves,\n      solved: self.isSolved()\n    };\n  }\n}\n\nfunction useGameState() {\n  const gameState = GameState.getInstance();\n  const [state, setState] = React.useState(gameState.getState());\n\n  function newGame() {\n    gameState.startNewGame();\n    setState(gameState.getState());\n  }\n\n  function undo() {\n    gameState.undo();\n    setState(gameState.getState());\n  }\n\n  function move(index) {\n    return function () {\n      gameState.moveTile(index);\n      setState(gameState.getState());\n    };\n  }\n\n  return [state.board, state.moves, state.solved, newGame, undo, move];\n}\n\nfunction Tile({ index, pos, onClick }) {\n  const top = pos[0] * 100 + 5;\n  const left = pos[1] * 100 + 5;\n  const bgLeft = (index % 3) * 100 + 5;\n  const bgTop = Math.floor(index / 3) * 100 + 5;\n\n  return (\n    <button\n      aria-label=\"move-tile\"\n      className=\"tile\"\n      onClick={onClick}\n      style={{\n        top,\n        left,\n        background: `url(${toSolve})`,\n        backgroundPosition: `-${bgLeft}px -${bgTop}px`\n      }}\n    />\n  );\n}\n\nexport default function Jigsaw3x3() {\n  const [board, moves, solved, newGame, undo, move] = useGameState();\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2\">\n      <div className=\"grid grid-cols-1\">\n        <div className=\"grid grid-cols-2\">\n          <p className=\"text-xl self-center\">Move count: {moves}</p>\n          <button className=\"game-mode\" onClick={undo}>\n            UNDO\n          </button>\n        </div>\n        <div className=\"grid grid-cols-1 justify-items-center\">\n          <div className=\"relative board3x3\">\n            {board.slice(0, -1).map((pos, index) => (\n              <Tile index={index} pos={pos} onClick={move(index)} />\n            ))}\n          </div>\n          {solved && (\n            <button className=\"game-mode\" onClick={newGame}>\n              Play Again?\n            </button>\n          )}\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1\">\n        <p className=\"text-xl text-center self-center\">Solution</p>\n        <img\n          className=\"justify-self-center\"\n          src={toSolve}\n          alt=\"\"\n          width={300}\n          height={300}\n        />\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/puzzle1-d41fe2cfa93f23b994258d2a75ec94c7.jpg\";","export default __webpack_public_path__ + \"static/puzzle2-00f2dc1b3d549921e7c4180d272b1f0c.jpg\";","export default __webpack_public_path__ + \"static/puzzle3-5d52972662b1e046429bc0356d594f94.jpg\";","export default __webpack_public_path__ + \"static/puzzle4-2144ffcdcc9cc330ac43fcd00d175788.jpg\";","export default __webpack_public_path__ + \"static/puzzle5-de781484c147fa7e465949620138f6d1.jpg\";","export default __webpack_public_path__ + \"static/puzzle6-9b4d017690f7aae08ed8565ce41f88c1.jpg\";","import * as React from 'react';\n\nimport puzzleA from '../assets/4x4/puzzle1.jpg';\nimport puzzleB from '../assets/4x4/puzzle2.jpg';\nimport puzzleC from '../assets/4x4/puzzle3.jpg';\nimport puzzleD from '../assets/4x4/puzzle4.jpg';\nimport puzzleE from '../assets/4x4/puzzle5.jpg';\nimport puzzleF from '../assets/4x4/puzzle6.jpg';\n\nconst NUM_ROWS = 4;\nconst NUM_COLS = 4;\nconst NUM_TILES = NUM_ROWS * NUM_COLS;\nconst EMPTY_INDEX = NUM_TILES - 1;\nconst SHUFFLE_MOVES_RANGE = [60, 80];\nconst MOVE_DIRECTIONS = ['up', 'down', 'left', 'right'];\nconst puzzles = [puzzleA, puzzleB, puzzleC, puzzleD, puzzleE, puzzleF];\nconst toSolve = puzzles[rand(0, 5)];\n\nfunction rand(min, max) {\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n\nclass GameState {\n  static getNewBoard() {\n    return Array(NUM_TILES)\n      .fill(0)\n      .map((x, index) => [Math.floor(index / NUM_ROWS), index % NUM_COLS]);\n  }\n\n  static solvedBoard = GameState.getNewBoard();\n  static instance = null;\n\n  static getInstance() {\n    if (!GameState.instance) GameState.instance = new GameState();\n    return GameState.instance;\n  }\n\n  constructor() {\n    this.startNewGame();\n  }\n\n  isSolved() {\n    for (let i = 0; i < NUM_TILES; i++) {\n      if (\n        this.board[i][0] !== GameState.solvedBoard[i][0] ||\n        this.board[i][1] !== GameState.solvedBoard[i][1]\n      )\n        return false;\n    }\n    return true;\n  }\n\n  startNewGame() {\n    this.moves = 0;\n    this.board = GameState.getNewBoard();\n    this.stack = [];\n    this.shuffle();\n  }\n\n  shuffle() {\n    this.shuffling = true;\n    let shuffleMoves = rand(...SHUFFLE_MOVES_RANGE);\n    while (shuffleMoves-- > 0) {\n      this.moveInDirection(MOVE_DIRECTIONS[rand(0, 3)]);\n    }\n    this.shuffling = false;\n  }\n\n  canMoveTile(index) {\n    if (index < 0 || index >= NUM_TILES) return false;\n\n    const tilePos = this.board[index];\n    const emptyPos = this.board[EMPTY_INDEX];\n    if (tilePos[0] === emptyPos[0])\n      return Math.abs(tilePos[1] - emptyPos[1]) === 1;\n    else if (tilePos[1] === emptyPos[1])\n      return Math.abs(tilePos[0] - emptyPos[0]) === 1;\n    else return false;\n  }\n\n  moveTile(index) {\n    if (!this.shuffling && this.isSolved()) return false;\n    if (!this.canMoveTile(index)) return false;\n\n    const emptyPosition = [...this.board[EMPTY_INDEX]];\n    const tilePosition = [...this.board[index]];\n\n    let boardAfterMove = [...this.board];\n    boardAfterMove[EMPTY_INDEX] = tilePosition;\n    boardAfterMove[index] = emptyPosition;\n\n    if (!this.shuffling) this.stack.push(this.board);\n    this.board = boardAfterMove;\n    if (!this.shuffling) this.moves += 1;\n\n    return true;\n  }\n\n  undo() {\n    if (this.stack.length === 0) return false;\n    this.board = this.stack.pop();\n  }\n\n  moveInDirection(dir) {\n    const epos = this.board[EMPTY_INDEX];\n    const posToMove =\n      dir === 'up'\n        ? [epos[0] + 1, epos[1]]\n        : dir === 'down'\n        ? [epos[0] - 1, epos[1]]\n        : dir === 'left'\n        ? [epos[0], epos[1] + 1]\n        : dir === 'right'\n        ? [epos[0], epos[1] - 1]\n        : epos;\n    let tileToMove = EMPTY_INDEX;\n    for (let i = 0; i < NUM_TILES; i++) {\n      if (\n        this.board[i][0] === posToMove[0] &&\n        this.board[i][1] === posToMove[1]\n      ) {\n        tileToMove = i;\n        break;\n      }\n    }\n    this.moveTile(tileToMove);\n  }\n\n  getState() {\n    const self = this;\n    return {\n      board: self.board,\n      moves: self.moves,\n      solved: self.isSolved()\n    };\n  }\n}\n\nfunction useGameState() {\n  const gameState = GameState.getInstance();\n  const [state, setState] = React.useState(gameState.getState());\n\n  function newGame() {\n    gameState.startNewGame();\n    setState(gameState.getState());\n  }\n\n  function undo() {\n    gameState.undo();\n    setState(gameState.getState());\n  }\n\n  function move(index) {\n    return function () {\n      gameState.moveTile(index);\n      setState(gameState.getState());\n    };\n  }\n\n  return [state.board, state.moves, state.solved, newGame, undo, move];\n}\n\nfunction Tile({ index, pos, onClick }) {\n  const top = pos[0] * 100 + 5;\n  const left = pos[1] * 100 + 5;\n  const bgLeft = (index % 4) * 100 + 5;\n  const bgTop = Math.floor(index / 4) * 100 + 5;\n\n  return (\n    <button\n      aria-label=\"move-tile\"\n      className=\"tile\"\n      onClick={onClick}\n      style={{\n        top,\n        left,\n        background: `url(${toSolve})`,\n        backgroundPosition: `-${bgLeft}px -${bgTop}px`\n      }}\n    />\n  );\n}\n\nexport default function Jigsaw4x4() {\n  const [board, moves, solved, newGame, undo, move] = useGameState();\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2\">\n      <div className=\"grid grid-cols-1\">\n        <div className=\"grid grid-cols-2\">\n          <p className=\"text-xl self-center\">Move count: {moves}</p>\n          <button className=\"game-mode\" onClick={undo}>\n            UNDO\n          </button>\n        </div>\n        <div className=\"grid grid-cols-1 justify-items-center\">\n          <div className=\"relative board4x4\">\n            {board.slice(0, -1).map((pos, index) => (\n              <Tile index={index} pos={pos} onClick={move(index)} />\n            ))}\n          </div>\n          {solved && (\n            <button className=\"game-mode\" onClick={newGame}>\n              Play Again?\n            </button>\n          )}\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1\">\n        <p className=\"text-xl text-center self-center\">Solution</p>\n        <img\n          className=\"justify-self-center\"\n          src={toSolve}\n          alt=\"\"\n          width={400}\n          height={400}\n        />\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\n\nimport Jigsaw3x3 from '../components/Jigsaw3x3';\nimport Jigsaw4x4 from '../components/Jigsaw4x4';\nimport SearchEngineOptimization from '../components/SearchEngineOptimization';\n\nexport default function Home() {\n  const [difficulty, setDifficulty] = React.useState('');\n\n  return (\n    <>\n      <SearchEngineOptimization title=\"Home\" />\n      <main className=\"grid grid-cols-1\">\n        {!difficulty ? (\n          <>\n            <p className=\"text-xl text-center\">Choose a difficulty level...</p>\n            <div className=\"grid grid-cols-2\">\n              <button\n                className=\"game-mode\"\n                onClick={() => setDifficulty('3x3')}\n              >\n                3x3\n              </button>\n              <button\n                className=\"game-mode\"\n                onClick={() => setDifficulty('4x4')}\n              >\n                4x4\n              </button>\n            </div>\n          </>\n        ) : (\n          <>{difficulty === '3x3' ? <Jigsaw3x3 /> : <Jigsaw4x4 />}</>\n        )}\n      </main>\n    </>\n  );\n}\n"],"names":["SHUFFLE_MOVES_RANGE","MOVE_DIRECTIONS","toSolve","puzzleA","puzzleB","puzzleC","puzzleD","puzzleE","puzzleF","rand","min","max","Math","floor","random","GameState","this","startNewGame","getNewBoard","Array","NUM_ROWS","fill","map","x","index","getInstance","instance","isSolved","i","board","solvedBoard","moves","stack","shuffle","shuffling","shuffleMoves","moveInDirection","canMoveTile","tilePos","emptyPos","NUM_TILES","abs","moveTile","emptyPosition","tilePosition","boardAfterMove","push","undo","length","pop","dir","epos","posToMove","tileToMove","getState","self","solved","Tile","pos","onClick","top","left","bgLeft","bgTop","className","style","background","backgroundPosition","Jigsaw3x3","gameState","state","setState","React","newGame","move","slice","src","alt","width","height","Jigsaw4x4","Home","difficulty","setDifficulty","SearchEngineOptimization","title"],"sourceRoot":""}